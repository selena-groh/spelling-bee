{"version":3,"sources":["Letter.js","Button.js","InputtedLetters.js","utils.js","WordList.js","Game.js","App.js","index.js"],"names":["Letter","letter","onClick","isRequired","className","cx","Button","props","children","InputtedLetters","input","letterOptions","map","inputtedLetter","index","includes","toLowerCase","shuffleArray","array","i","length","j","Math","floor","random","temp","generateRandomFromArray","generateRandomVowel","generateRandomCommonConsonant","generateNUnique","generator","n","generatedList","generated","push","WordList","words","word","Game","useState","currentInput","setCurrentInput","setWords","setLetterOptions","useEffect","uniqueVowels","uniqueConsonants","deleteLetter","useCallback","slice","shuffleLetters","submitWord","containsRequiredLetter","areLettersValid","every","isWordLongEnough","isUnique","handleKeyDown","e","key","String","fromCharCode","keyCode","match","document","addEventListener","removeEventListener","App","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.c80988b8.chunk.js","sourcesContent":["import \"./Letter.scss\";\nimport cx from \"classnames\";\n\nconst Letter = ({ letter, onClick, isRequired }) => {\n  return (\n    <button className=\"Letter\" onClick={onClick}>\n      <div\n        className={cx(\"Letter-hex\", { \"Letter-hex--isRequired\": isRequired })}\n      >\n        <span className=\"Letter-letter\">{letter}</span>\n      </div>\n    </button>\n  );\n};\n\nexport default Letter;\n","import \"./Button.scss\";\n\nconst Button = (props) => {\n  return (\n    <button className=\"Button\" {...props}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import \"./InputtedLetters.scss\";\nimport cx from \"classnames\";\n\nconst InputtedLetters = ({ input, letterOptions }) => (\n  <div className=\"InputtedLetters\">\n    <span className=\"InputtedLetters-input\">\n      {[...input].map((inputtedLetter, index) => (\n        <span\n          key={`${inputtedLetter}-${index}`}\n          className={cx(\"InputtedLetters-inputLetter\", {\n            \"InputtedLetters-inputLetter--invalid\": !letterOptions.includes(\n              inputtedLetter.toLowerCase()\n            ),\n            \"InputtedLetters-inputLetter--required\":\n              inputtedLetter === letterOptions[0]\n          })}\n        >\n          {inputtedLetter}\n        </span>\n      ))}\n    </span>\n  </div>\n);\n\nexport default InputtedLetters;\n","export const shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return [...array];\n};\n\nconst ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\nconst VOWELS = \"aeiou\";\n\n// Note: could be adjusted in the future. Currently limited to common consonants to make it easier to solve.\nconst CONSONANTS = \"bcdfghjklmnpqrstvwxz\";\nconst COMMON_CONSONANTS = \"bcdfghklmnprstvwzy\";\n\nconst generateRandomFromArray = (array) =>\n  array[Math.floor(Math.random() * array.length)];\n\nexport const generateRandomLetter = () => generateRandomFromArray(ALPHABET);\nexport const generateRandomVowel = () => generateRandomFromArray(VOWELS);\nexport const generateRandomCommonConsonant = () =>\n  generateRandomFromArray(COMMON_CONSONANTS);\n\nexport const generateNUnique = (generator, n) => {\n  const generatedList = [];\n  for (var i = 0; i < n; i++) {\n    let generated = \"\";\n    do {\n      generated = generator();\n    } while (generatedList.includes(generated));\n    generatedList.push(generated);\n  }\n  return generatedList;\n};\n","import \"./WordList.scss\";\n\nconst WordList = ({ words }) => (\n  <div className=\"WordList\">\n    <p className=\"WordList-wordCount\">\n      You have found {words.length} word{words.length === 1 ? \"\" : \"s\"}. (But no\n      guarantees they're real words -- yet!)\n    </p>\n    <ul>\n      {words.map((word) => (\n        <li key={word} className=\"WordList-word\">\n          {word}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nexport default WordList;\n","import { useCallback, useEffect, useState } from \"react\";\nimport \"./Game.scss\";\nimport Letter from \"./Letter\";\nimport Button from \"./Button\";\nimport InputtedLetters from \"./InputtedLetters\";\nimport {\n  shuffleArray,\n  generateNUnique,\n  generateRandomVowel,\n  generateRandomCommonConsonant\n} from \"./utils\";\nimport WordList from \"./WordList\";\n\nconst NUM_VOWELS = 3;\nconst NUM_CONSONANTS = 4;\nconst REQUIRED_LETTER_INDEX = 0;\n\nconst Game = () => {\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const [words, setWords] = useState([]);\n  const [letterOptions, setLetterOptions] = useState([]);\n\n  // Runs once on initial page load to determine the letter options\n  useEffect(() => {\n    const uniqueVowels = generateNUnique(generateRandomVowel, NUM_VOWELS);\n    const uniqueConsonants = generateNUnique(\n      generateRandomCommonConsonant,\n      NUM_CONSONANTS\n    );\n    setLetterOptions(shuffleArray([...uniqueVowels, ...uniqueConsonants]));\n  }, []);\n\n  const deleteLetter = useCallback(() => {\n    setCurrentInput((currentInput) => currentInput.slice(0, -1));\n  }, []);\n\n  const shuffleLetters = useCallback(\n    () =>\n      setLetterOptions((letterOptions) => [\n        letterOptions[0],\n        ...shuffleArray(letterOptions.slice(1))\n      ]),\n    []\n  );\n\n  const submitWord = useCallback(() => {\n    const containsRequiredLetter = currentInput.includes(\n      letterOptions[REQUIRED_LETTER_INDEX]\n    );\n    const areLettersValid = [...currentInput].every((inputtedLetter) =>\n      letterOptions.includes(inputtedLetter.toLowerCase())\n    );\n    const isWordLongEnough = currentInput.length > 3;\n    const isUnique = !words.includes(currentInput);\n    if (\n      containsRequiredLetter &&\n      areLettersValid &&\n      isWordLongEnough &&\n      isUnique\n    ) {\n      setWords((words) => [...words, currentInput]);\n      setCurrentInput(\"\");\n    }\n  }, [currentInput, letterOptions, words]);\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === \"Backspace\") {\n        deleteLetter();\n      } else if (e.key === \" \") {\n        shuffleLetters();\n      } else if (e.key === \"Enter\") {\n        submitWord();\n      } else if (String.fromCharCode(e.keyCode).match(/([A-Z]|[a-z])/g)) {\n        setCurrentInput((currentInput) => `${currentInput}${e.key}`);\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n\n    return function cleanup() {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [deleteLetter, shuffleLetters, submitWord]);\n\n  return (\n    <div className=\"Game\">\n      <InputtedLetters input={currentInput} letterOptions={letterOptions} />\n      <div className=\"Game-cells\">\n        {letterOptions.map((letter, index) => (\n          <Letter\n            key={`${letter}-${index}`}\n            isRequired={index === REQUIRED_LETTER_INDEX}\n            letter={letter}\n            onClick={() => setCurrentInput(`${currentInput}${letter}`)}\n          />\n        ))}\n      </div>\n      <div className=\"Game-actions\">\n        <Button onClick={shuffleLetters}>Shuffle</Button>\n        <Button onClick={deleteLetter}>Delete</Button>\n        <Button onClick={() => setCurrentInput(\"\")}>Clear</Button>\n        <Button onClick={submitWord}>Enter</Button>\n      </div>\n      <WordList words={words} />\n    </div>\n  );\n};\n\nexport default Game;\n","import \"./App.scss\";\nimport Game from \"./Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-title\">Spelling Bee</h1>\n      <p className=\"App-subtitle\">A NYT Spelling Bee remake, just for fun!</p>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.scss\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}