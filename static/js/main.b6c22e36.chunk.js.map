{"version":3,"sources":["Letter.js","Button.js","InputtedLetters.js","utils.js","Board.js","App.js","index.js"],"names":["Letter","letter","onClick","isRequired","className","cx","Button","props","children","InputtedLetters","input","letterOptions","map","inputtedLetter","index","includes","toLowerCase","ALPHABET","Board","useState","currentInput","setCurrentInput","words","setWords","setLetterOptions","useEffect","tempLetterOptions","i","randomLetter","Math","floor","random","length","push","deleteLetter","useCallback","slice","shuffleLetters","array","j","temp","shuffleArray","submitWord","areLettersValid","every","isWordLongEnough","handleKeyDown","e","key","String","fromCharCode","keyCode","match","document","addEventListener","removeEventListener","word","App","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b6c22e36.chunk.js","sourcesContent":["import \"./Letter.scss\";\nimport cx from \"classnames\";\n\nconst Letter = ({ letter, onClick, isRequired }) => {\n  return (\n    <button className=\"Letter\" onClick={onClick}>\n      <div\n        className={cx(\"Letter-hex\", { \"Letter-hex--isRequired\": isRequired })}\n      >\n        <span className=\"Letter-letter\">{letter}</span>\n      </div>\n    </button>\n  );\n};\n\nexport default Letter;\n","import \"./Button.scss\";\n\nconst Button = (props) => {\n  return (\n    <button className=\"Button\" {...props}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import \"./InputtedLetters.scss\";\nimport cx from \"classnames\";\n\nconst InputtedLetters = ({ input, letterOptions }) => (\n  <div className=\"InputtedLetters\">\n    <span className=\"InputtedLetters-input\">\n      {[...input].map((inputtedLetter, index) => (\n        <span\n          key={`${inputtedLetter}-${index}`}\n          className={cx(\"InputtedLetters-inputLetter\", {\n            \"InputtedLetters-inputLetter--invalid\": !letterOptions.includes(\n              inputtedLetter.toLowerCase()\n            ),\n            \"InputtedLetters-inputLetter--required\":\n              inputtedLetter === letterOptions[0]\n          })}\n        >\n          {inputtedLetter}\n        </span>\n      ))}\n    </span>\n  </div>\n);\n\nexport default InputtedLetters;\n","export const shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return [...array];\n};\n\nconst ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\n\nexport const generateRandomCharacter = () =>\n  ALPHABET[Math.floor(Math.random() * ALPHABET.length)];\n","import { useCallback, useEffect, useState } from \"react\";\nimport \"./Board.scss\";\nimport Letter from \"./Letter\";\nimport Button from \"./Button\";\nimport InputtedLetters from \"./InputtedLetters\";\nimport { shuffleArray, generateRandomCharacter } from \"./utils\";\n\nconst NUM_LETTERS = 7;\n\nconst Board = () => {\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const [words, setWords] = useState([]);\n  const [letterOptions, setLetterOptions] = useState([]);\n\n  // Runs once on initial page load to determine the letter options\n  useEffect(() => {\n    const tempLetterOptions = [];\n    for (var i = 1; i <= NUM_LETTERS; i++) {\n      let randomLetter = \"\";\n      do {\n        randomLetter = generateRandomCharacter();\n      } while (tempLetterOptions.includes(randomLetter));\n      tempLetterOptions.push(randomLetter);\n    }\n    setLetterOptions(tempLetterOptions);\n  }, []);\n\n  const deleteLetter = useCallback(() => {\n    setCurrentInput((currentInput) => currentInput.slice(0, -1));\n  }, []);\n\n  const shuffleLetters = useCallback(\n    () =>\n      setLetterOptions((letterOptions) => [\n        letterOptions[0],\n        ...shuffleArray(letterOptions.slice(1))\n      ]),\n    []\n  );\n\n  const submitWord = useCallback(() => {\n    const areLettersValid = [...currentInput].every((inputtedLetter) =>\n      letterOptions.includes(inputtedLetter.toLowerCase())\n    );\n    const isWordLongEnough = currentInput.length > 3;\n    if (areLettersValid && isWordLongEnough) {\n      setWords((words) => [...words, currentInput]);\n      setCurrentInput(\"\");\n    }\n  }, [currentInput, letterOptions]);\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === \"Backspace\") {\n        deleteLetter();\n      } else if (e.key === \" \") {\n        shuffleLetters();\n      } else if (e.key === \"Enter\") {\n        submitWord();\n      } else if (String.fromCharCode(e.keyCode).match(/([A-Z]|[a-z])/g)) {\n        setCurrentInput((currentInput) => `${currentInput}${e.key}`);\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n\n    return function cleanup() {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [deleteLetter, shuffleLetters, submitWord]);\n\n  return (\n    <div className=\"Board\">\n      <InputtedLetters input={currentInput} letterOptions={letterOptions} />\n      <div className=\"Board-cells\">\n        {letterOptions.map((letter, index) => (\n          <Letter\n            key={`${letter}-${index}`}\n            isRequired={index === 0}\n            letter={letter}\n            onClick={() => setCurrentInput(`${currentInput}${letter}`)}\n          />\n        ))}\n      </div>\n      <div className=\"Board-actions\">\n        <Button onClick={shuffleLetters}>Shuffle</Button>\n        <Button onClick={deleteLetter}>Delete</Button>\n        <Button onClick={() => setCurrentInput(\"\")}>Clear</Button>\n        <Button onClick={submitWord}>Enter</Button>\n      </div>\n      <p>\n        You have found {words.length} words. (But no guarantees they're real\n        words -- yet!)\n      </p>\n      <ul>\n        {words.map((word) => (\n          <li key={word}>{word}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Board;\n","import \"./App.scss\";\nimport Board from \"./Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-title\">Spelling Bee</h1>\n      <p className=\"App-subtitle\">A NYT Spelling Bee remake, just for fun!</p>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.scss\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}